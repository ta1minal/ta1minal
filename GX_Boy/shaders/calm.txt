uniform shader iChunk;
uniform float2 iChunkSize;
uniform float2 iChunkOffset;
uniform float2 iContentSize;
uniform float iFrame;

//2D normalized hash function (returns a random unit vector)
half2 hash2_norm(half2 p)
{
	return normalize(fract(cos(p*float2x2(12.98,78.37,69.42,13.14))*3956.4)-0.5);
}
half4 sample(float2 xy)
{
	float2 c = clamp(xy, half2(0), iChunkSize-2);
	return iChunk.eval(c);
}
half4 screen(float2 xy)
{
	//Intensity of mask effect between 0 and 1
	const half MASK_INTENSITY = 0.1;
	//Pixel scale of shadow mask
	const half MASK_SCALE = 2;
	
	//Round coordinates to mask cell
	float2 cell = floor(xy/MASK_SCALE);
	//Mask cell offset (shifts half a cell every other row)
	float2 cell_offset = half2(fract(cell.y/2),0);
	//Compute RGB mask index (0 == red, 1 == green, 2 == blue)
	half mask_index = mod(floor(cell.x/2+cell.y*1.5),3);
	//Blend with mask cell color
	half4 mask_color = half4(mask_index==0, mask_index==1, mask_index==2, 1)*3;

	//Sample texture with abberation offsets
	half4 color = sample(xy);
	
	return color*(1+(mask_color-1)*MASK_INTENSITY);
}

half4 main(float2 xy)
{
	//Intensity of scanline effect
	const half SCANLINE_INTENSITY = 0.1;
	//Scanline width in pixels
	const half SCANLINE_WIDTH = 2;
	//Scanline endpoint (should be between P1 and 1)
	const half SCANLINE_P0 = 1;
	//Scanline startpoint (should be between 0 and 1)
	const half SCANLINE_P1 = 0.2;
	
	//Bloom parameters:
	//Radius multiplier
	const float RADIUS = 2;
	//Number of blur samples. More samplers = smoother but costlier
	const float SAMPLES = 8;
	
	//Curvature intensity
	const half CURVATURE = 0.02;
	
	//Convert to screen uv coordinates
	float2 uv = xy/iChunkSize*2-1;
	//Apply exponential curvature
	uv *= 1+(dot(uv,uv)-1.5) * CURVATURE;
	//Convert back to pixel coordinates with clamping
	xy = (uv*0.5+0.5)*iChunkSize;
	
	//Oscillate between -1 and +1 for scanlines
	half scanline_ridge = abs(mod(xy.y/SCANLINE_WIDTH,2)-1);
	//Compute scanline value with approximate average of 1.
	half scanline = smoothstep(SCANLINE_P0, SCANLINE_P1, scanline_ridge) + 0.5;
	//Dampen scanline intensity amount
	scanline = mix(1, scanline, SCANLINE_INTENSITY);
	
	//Initialize glow average and total weight
	half4 bloom = half4(0);
	
	//Start with a random sample point
	float2 point = hash2_norm(xy)*RADIUS;
	//Golden angle rotation matrix (look up Fibonacci or Vogel disks)
	const float2x2 rot = float2x2(-0.737369, 0.675490, -0.675490, -0.737369);
	
	//Iterate through samples
	for(float i = 0; i<SAMPLES; i++)
	{
		//Rotate sample point
		point *= rot;
		//Add gamma-encoded sample and diminish edges
		half4 sample = screen(xy+point*sqrt(i));
		bloom += half4(sample.rgb,1)/sqrt(i+.01);
	}
	half4 color = bloom / bloom.a;
	
	//Apply scanlines
	color.rgb *= scanline;

	//Average samples and decode gamma
	return pow(color,half4(1));
}